# -*- coding: utf-8 -*-
from django.test import TestCase
from os.path import join
from django.conf import settings
from django.test import Client
from rest_framework_fine_permissions.models import UserFieldPermissions,\
        FieldPermission
from rest_framework.authtoken.models import Token
from django.contrib.auth.models import User, Permission
from django.contrib.contenttypes.models import ContentType
from hypnos.apps.webservice.models import DjangoSite as WsDjangoSite
import json


class LoadWebserviceTest(TestCase):
    """
    Test the webservice generated by previous unit test.
    """

    def setUp(self):
        # Conf for webservice
        self.app_folder = join(join(settings.DJANGO_ROOT, "apps"),
                               "webservice")
        # Create user, token, permissions and client
        self.user = User.objects.create(username="arthur", password="arthur")
        self.token = Token.objects.create(user=self.user, key=b'S3CR3T')
        self.client = Client()
        self.client.login(username='arthur', password='arthur')
        # permissions
        content_type = ContentType.objects.get_for_model(WsDjangoSite)
        Permission.objects.create(codename='Can view auth user',
                                  name='Can view auth user',
                                  content_type=content_type)
        self.user.user_permissions = Permission.objects.all()
        self.headers = {'HTTP_AUTHORIZATION': 'Token S3CR3T'}
        # fines permissions
        ct = ContentType.objects.get_by_natural_key("webservice", "djangosite")
        FieldPermission.objects.create(name="id", content_type=ct)
        FieldPermission.objects.create(name="domain", content_type=ct)
        FieldPermission.objects.create(name="name", content_type=ct)
        fields_perms = FieldPermission.objects.all()
        ufp = UserFieldPermissions.objects.create(user=self.user)
        ufp.permissions.add(*fields_perms)

    def test_ws1_post(self):
        response = self.client.post('/webservice/djangosite.json',
                                    data=json.dumps({'id': 2, 'domain': 'mydomain', 'name':'myname'}),
                                    content_type='application/json', **self.headers)
        self.assertEqual(response.data, {'id': 2, 'domain': 'mydomain', 'name': 'myname'})

    def test_ws2_get(self):
        response = self.client.get('/webservice/djangosite/2.json',
                                   **self.headers)
        self.assertEqual(response.data, {'id': 2, 'domain': 'mydomain', 'name':'myname'})

    def test_ws3_list(self):
        response = self.client.get('/webservice/djangosite.json',
                                   **self.headers)
        self.assertTrue({'id': 2, 'domain': 'mydomain', 'name': 'myname'} in response.data)

    def test_ws4_patch(self):
        response = self.client.patch('/webservice/djangosite/2.json', 
                                     data=json.dumps({'name': 'newname'}),
                                     content_type='application/json', **self.headers)
        self.assertEqual(response.data, {'id': 2, 'domain': 'mydomain', 'name': 'newname'})

    def test_ws5_put(self):
        response = self.client.put('/webservice/djangosite/2.json', 
                                   data=json.dumps({'name': 'newname2', 'domain':'mydomain','id':2}),
                                   content_type='application/json', **self.headers)
        self.assertEqual(response.data, {'id': 2, 'domain': 'mydomain', 'name': 'newname2'})

    def test_ws6_delete(self):
        self.client.delete('/webservice/djangosite/2.json',
                                   **self.headers)
        response2 = self.client.get('/webservice/djangosite/2.json',
                                   **self.headers)
        self.assertEqual(response2.data, {'error': 'Not found'})
